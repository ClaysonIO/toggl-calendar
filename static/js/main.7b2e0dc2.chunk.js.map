{"version":3,"sources":["Components/WorkSpaceSelect.tsx","Components/GithubLogo.tsx","Components/Header.tsx","Components/Layout.tsx","Pages/Settings.tsx","Utilities/Settings.ts","Utilities/Functions/DecimalToClockTime.ts","Utilities/Functions/DecimalToRoundedTime.ts","Utilities/Day.ts","Utilities/Row.ts","Utilities/Tag.ts","Utilities/Project.ts","Utilities/Toggl.ts","Utilities/Entry.ts","Utilities/Group.ts","Utilities/WorkSpace.ts","Utilities/User.ts","Utilities/AppState.ts","Components/DivCalendar/HeaderDate.tsx","Components/DivCalendar/HeaderRow.tsx","Components/ExpandButton.tsx","Components/DivCalendar/Cell.tsx","Utilities/Functions/DecimalToDisplayType.ts","Components/DivCalendar/TagMenu.tsx","Components/DivCalendar/TagRow.tsx","Components/DivCalendar/FooterDate.tsx","Components/DivCalendar/FooterRow.tsx","Components/Loading.tsx","Components/DivCalendar/ProjectMenu.tsx","Components/DivCalendar/ProjectRow.tsx","Components/DivCalendar/ProjectRowDraggable.tsx","Components/NoContent.tsx","Components/DivCalendar/ExmptyRow.tsx","Components/DivCalendar/GroupMenu.tsx","Components/DivCalendar/GroupRow.tsx","Components/DivCalendar/GroupRowDraggable.tsx","Components/DivCalendar/Container.tsx","Utilities/Functions/SplitQuery.ts","Components/DisplayTypeSelect.tsx","Components/CalendarDateNav.tsx","Components/EmailList.tsx","Pages/Calendar.tsx","Pages/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WorkSpaceSelect","observer","value","appState","selectedWorkSpace","id","label","name","undefined","workSpaces","length","className","style","width","onChange","e","workSpace","find","val","selectWorkSpace","options","map","Fragment","GithubLogo","height","marginLeft","href","aria-label","rel","target","viewBox","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","dangerouslySetInnerHTML","__html","Header","to","flex","Layout","children","SettingsPage","history","useHistory","display","flexDirection","htmlFor","placeholder","type","settings","apiToken","setApiToken","currentTarget","onBlur","getWorkSpaces","onClick","disabled","marginTop","index","key","margin","push","textAlign","Settings","this","window","localStorage","getItem","token","setItem","observable","action","DecimalToClockTime","decimalHours","hours","Math","floor","minutes","round","slice","DecimalToRoundedTime","toFixed","dayjs","extend","duration","Day","date","entry","entries","reduce","acc","current","item","description","dur","asHours","indexOf","computed","Row","bound","rowId","random","toString","setExpanded","bind","expanded","emails","setEmailItem","email","setEmails","concat","state","filter","startDate","endDate","start","startOf","end","endOf","days","isAfter","isBefore","isSame","getDates","timeAsHours","sort","a","b","localeCompare","rowToEmailHash","format","Tag","project","day","dateHash","addEntry","Project","pid","client","project_hex_color","currentTag","tags","numeric","group","groups","forEach","workspaceGroup","projectIds","setProjectIds","setGroups","Toggl","apiKey","Promise","resolve","reject","axios","get","auth","username","password","then","result","workspaces","data","catch","err","user_id","workspace_id","page","timeEntries","currentPage","params","since","until","user_agent","location","origin","user_ids","user","per_page","setTimeout","FetchDateRangeDetails","Entry","join","Group","JSON","stringify","projects","Object","values","v","toISOString","split","serialized","parse","WorkSpace","api_token","projectOrder","getGroups","getExpanded","getRowToEmailHash","serializedExpanded","serializedEmailHash","serializedGroups","deserialize","serialize","destination","source","reason","currentOrder","splice","pop","loading","newGroup","taskResponses","projectHash","taskResponse","newProject","runInAction","setLoading","addTasksToProjects","finally","sumDay","sumWeek","keys","rows","emailToRowHash","GroupHash","ProjectHash","TagHash","tag","projectIdsInGroups","orderedId","User","fullname","AppState","setWorkSpaces","setUser","toInterface","removeItem","GetUser","alert","toLowerCase","lastSelectedWorkSpace","HeaderDate","overflow","HeaderRow","dates","gridCols","gridTemplateColumns","ExpandButton","Cell","displayType","useState","visible","setVisible","hide","valueString","tasks","roundedHours","tasksAndRoundedTime","title","content","onClickOutside","event","range","document","createRange","textNode","selectNode","getSelection","removeAllRanges","addRange","execCommand","DecimalToDisplayType","TagMenu","setOpen","onOpen","onClose","trigger","backgroundColor","padding","boxShadow","isMulti","onCreateOption","createEmail","TagRow","inheritBackgroundColor","open","borderColor","FooterDate","row","FooterRow","Loading","ProjectMenu","useMemo","groupName","createGroup","setGroup","ProjectRow","isDragging","borderWidth","borderStyle","borderTopColor","borderLeftColor","borderRightColor","borderBottomColor","ProjectRowDraggable","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","NoContent","alignItems","justifyContent","EmptyRow","borderTop","GroupMenu","boxSizing","marginRight","setName","setColor","GroupRow","GroupRowDraggable","CalendarContainer","onDragEnd","orderProject","droppableId","droppableProps","orderedProjects","splitQuery","query","DisplayTypeSelect","setDisplayType","setValue","DisplayTypeButton","currentValue","CalendarDateNav","useLocation","search","navLinks","back","subtract","today","forward","add","useEffect","stopPropagation","getTasks","console","error","EmailList","emailRows","EmailRow","addressee","shift","bodyStart","subject","trim","timeBody","timeAndTaskBody","CalendarPage","startPoint","marginBottom","MainPage","App","path","component","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7b2e0dc2.chunk.js","sourcesContent":["import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {appState} from \"../App\";\nimport Select from \"react-select\";\n\nexport const WorkSpaceSelect = observer(()=>{\n\n    function selectWorkSpace(e: any){\n        const workSpace = appState.workSpaces.find(val=>val.id === e.value);\n        appState.selectWorkSpace(workSpace);\n    }\n\n    const value = appState.selectedWorkSpace ? {value: appState.selectedWorkSpace.id, label: appState.selectedWorkSpace.name} : undefined;\n\n    return appState.workSpaces.length ? (\n        <div className={'select'} style={{width: \"200px\"}}>\n            <Select onChange={selectWorkSpace} value={value} options={appState.workSpaces.map(val=>({value: val.id, label: val.name}))}/>\n        </div>\n    ) : <React.Fragment/>\n})","import React from 'react';\n\nexport const GithubLogo = ()=>{\n    return (\n        <React.Fragment>\n            <a style={{width: \"80px\", height: \"80px\", marginLeft: 0}} href=\"https://github.com/ClaysonIO/toggl-calendar\" className=\"github-corner\" aria-label=\"View source on GitHub\" rel=\"noopener noreferrer\" target={\"_blank\"}>\n                <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\"\n                     style={{fill:\"#ce6464\", color:\"#fff\", position: \"absolute\", top: 0, border: 0, right: 0}}\n                     aria-hidden=\"true\">\n                    <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n                    <path\n                        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n                        fill=\"currentColor\" style={{transformOrigin: \"130px 106px\"}} className=\"octo-arm\"></path>\n                    <path\n                        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n                        fill=\"currentColor\" className=\"octo-body\"></path>\n                </svg>\n            </a>\n            <style dangerouslySetInnerHTML={{__html: `\n                .github-corner:hover \n                .octo-arm{animation:octocat-wave 560ms ease-in-out}\n                \n                @keyframes\n                octocat-wave{0 %,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}\n                \n                @media\n                (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}\n            `}}/>\n        </React.Fragment>\n    )\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {WorkSpaceSelect} from \"./WorkSpaceSelect\";\nimport {appState} from \"../App\";\nimport {GithubLogo} from \"./GithubLogo\";\n\nexport const Header = ()=>{\n    return (\n        <header>\n            <Link to={'/main'}><h1>Toggl Calendar View</h1></Link>\n            <div style={{flex: 1}}/>\n            <WorkSpaceSelect/>\n            {appState.workSpaces.length ? <Link to={'/calendar'} >Calendar</Link> : \"\"}\n            <Link to={'/settings'} >Settings</Link>\n            <GithubLogo/>\n        </header>\n    )\n}","import React from \"react\";\nimport {Header} from \"./Header\";\n\nexport const Layout = ({children}: any)=>{\n    return (\n        <React.Fragment>\n            <Header/>\n            <main>\n                {children}\n            </main>\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport {Layout} from \"../Components/Layout\";\nimport {appState} from \"../App\";\nimport {observer} from \"mobx-react-lite\";\nimport {WorkSpace} from \"../Utilities/WorkSpace\";\nimport {useHistory} from \"react-router\";\n\nexport const SettingsPage = observer(()=>{\n\n    const history = useHistory();\n\n    function selectWorkSpace(workSpace?: WorkSpace){\n        appState.selectWorkSpace(workSpace);\n        history.push(`/calendar`);\n    }\n\n    return (\n        <Layout>\n            <h2>Settings</h2>\n            <section style={{display: \"flex\", flexDirection: \"column\"}}>\n                <label htmlFor={\"apiToken\"}><h3>Toggl API Token</h3></label>\n                <div style={{display: 'flex'}}>\n                    <input\n                        id={'apiToken'}\n                        style={{flex: 1}}\n                        placeholder={\"Put your token here...\"}\n                        type={'password'}\n                        value={appState.settings.apiToken}\n                        onChange={(e)=>{appState.settings.setApiToken(e.currentTarget.value)}}\n                        onBlur={appState.getWorkSpaces}\n                    />\n                    <button onClick={appState.getWorkSpaces} disabled={!appState.settings.apiToken}>Fetch Workspaces</button>\n                </div>\n                <small>Find your API token at the bottom of <a href={'https://toggl.com/app/profile'} rel=\"noopener noreferrer\" target={\"_blank\"}>toggl.com/app/profile</a> </small>\n            </section>\n            <section style={{marginTop: \"50px\"}}>\n                <div style={{display: 'flex'}}>\n                    <h3 style={{flex: 1}}>Toggl Workspaces</h3>\n                </div>\n                <hr/>\n\n                {appState.workSpaces.length ?\n                    <ul>\n                        {appState.workSpaces.map((val, index) => (<div key={index} style={{width: '200px', margin: '5px'}}>\n                                <button\n                                    style={{width: '100%'}}\n                                    onClick={()=>selectWorkSpace(val)}\n                                    key={index}>{val.name}</button>\n                            </div>\n                        ))}\n                    </ul>\n                    :\n                    <h4 style={{textAlign: 'center'}}>- No Workspaces Retrieved - </h4>\n                }\n\n            </section>\n        </Layout>\n    )\n})","import {action, observable} from \"mobx\";\n\nexport class Settings{\n    @observable public apiToken: string;\n\n    constructor() {\n        this.apiToken = window.localStorage.getItem('togglApiToken') || '';\n    }\n\n    @action public setApiToken(token: string){\n        this.apiToken = token;\n        window.localStorage.setItem(\"togglApiToken\", token);\n    }\n}","export function DecimalToClockTime(decimalHours: number){\n\n    let hours = Math.floor(decimalHours);\n    let minutes = Math.round(60 * (decimalHours - hours));\n\n    if(minutes === 60){\n        hours += 1;\n        minutes = 0;\n    }\n\n    return `${hours}:${`0${minutes > 0 ? minutes : 0}`.slice(-2)}`;\n}","export function DecimalToRoundedTime(decimalHours: number){\n    if(decimalHours <= 0){\n        return (0).toFixed(2);\n    }\n    //If the time is more than zero, round it up to 15 minutes.\n    return ((Math.round(decimalHours / .25) * .25) || .25).toFixed(2)\n}","import {Entry} from \"./Entry\";\nimport {action, computed, observable} from \"mobx\";\nimport dayjs, {Dayjs} from \"dayjs\";\nimport duration from \"dayjs/plugin/duration\";\nimport {DecimalToClockTime} from \"./Functions/DecimalToClockTime\";\nimport {DecimalToRoundedTime} from \"./Functions/DecimalToRoundedTime\";\n\ndayjs.extend(duration)\n\n\nexport class Day{\n    @observable public entries: Entry[] = [];\n    public date: Dayjs;\n\n    constructor({date}: {date: Dayjs}) {\n        this.date = date;\n    }\n\n    @action public addEntry(entry: Entry){\n        this.entries.push(entry);\n    }\n\n    @computed public get tasksAndRoundedTime(){\n        return this.entries.reduce((acc: {description: string, dur: number}[], val: Entry)=>{\n            let current = acc.find(item=>item.description === val.description);\n            if(!current){\n                current = {description: val.description, dur: 0};\n                acc.push(current);\n            }\n            current.dur += val.dur;\n            return acc;\n        }, [])\n            .map(val=>`(${DecimalToRoundedTime(dayjs.duration(val.dur).asHours())}) ${val.description}`);\n    }\n\n    @computed public get tasks(){\n        return this.entries.reduce((acc: string[], val: Entry)=>{\n            if(acc.indexOf(val.description) === -1){\n                acc.push(val.description);\n            }\n            return acc;\n        }, [])\n    }\n\n    @computed public get timeAsHours() {\n        return dayjs.duration(this.entries.reduce((acc: number, val: Entry) => {\n            return acc + val.dur;\n        }, 0)).asHours()\n    }\n\n    @computed public get hours(){\n        const decimalHours = dayjs.duration(this.entries.reduce((acc: number, val: Entry)=>{\n            return acc + val.dur;\n        }, 0)).asHours()\n\n        return DecimalToClockTime(decimalHours);\n    }\n\n    @computed public get roundedHours(): string{\n        return DecimalToRoundedTime(dayjs.duration(this.entries.reduce((acc: number, val: Entry)=>{\n            return acc + val.dur;\n        }, 0)).asHours())\n    }\n}","import {action, computed, observable} from \"mobx\";\nimport {Entry} from \"./Entry\";\nimport {Day} from \"./Day\";\nimport dayjs from \"dayjs\";\nimport {WorkSpace} from \"./WorkSpace\";\n\n//This class provides the functions to calculate\nexport abstract class Row{\n    public rowId: string = (Math.random() * 1000000000).toString()\n    public name: string = '';\n    @observable public entries: Entry[] = [];\n    @observable public days: Day[] = [];\n    @computed public get expanded(): boolean {return this.workSpace.expanded.indexOf(this.rowId) > -1};\n    @observable public color: string = \"#ff8330\";\n    public readonly workSpace: WorkSpace;\n    public abstract readonly type: 'group' | 'project' | 'tag';\n\n    constructor({workSpace}: {workSpace: WorkSpace}) {\n        this.workSpace = workSpace;\n        this.setExpanded = this.setExpanded.bind(this);\n    }\n\n    @computed public get emails(): string[]{\n        return this.workSpace.rowToEmailHash[this.rowId] || [];\n    }\n\n    public setEmails(emails: string[]){\n        this.workSpace.setEmailItem({rowId: this.rowId, emails});\n    }\n\n    @action.bound public createEmail(email: string){\n        this.setEmails(this.emails.concat(email));\n    }\n\n    @computed public get dateHash(){\n        return this.days.reduce((acc: {[key: string]: Day}, val)=>{\n            acc[val.date.format('YYYYMMDD')] = val;\n            return acc;\n        }, {});\n    }\n\n    @action public setExpanded(state: boolean){\n        if(this.expanded && !state){\n            this.workSpace.setExpanded(this.workSpace.expanded.filter(val=>val !== this.rowId));\n        } else if(!this.expanded && state){\n            this.workSpace.setExpanded(this.workSpace.expanded.concat([this.rowId]));\n        }\n    }\n\n    protected getDates(startDate: string, endDate: string){\n        const start = dayjs(startDate).startOf('day');\n        const end = dayjs(endDate).endOf('day');\n\n        return this.days.filter(val=> (\n            val.date.isAfter(start)\n            && val.date.isBefore(end))\n            || val.date.isSame(start, 'day')\n            || val.date.isSame(end, 'day')\n        );\n    }\n\n    public timeAsHours(startDate: string, endDate: string): number{\n        const dates = this.getDates(startDate, endDate);\n\n        return dates.reduce((acc: number, val)=>{\n            return acc + val.timeAsHours;\n        }, 0)\n    }\n\n\n    public hours(startDate: string, endDate: string){\n        const decimalHours = this.timeAsHours(startDate, endDate);\n\n        const hours = Math.floor(decimalHours);\n        const minutes = Math.round(60 * (decimalHours - hours));\n\n        return `${hours}:${`0${minutes > 0 ? minutes : 0}`.slice(-2)}`;\n    }\n\n    public roundedHours(startDate: string, endDate: string): string{\n        return (Math.round(this.timeAsHours(startDate, endDate) / .25) * .25).toFixed(2)\n    }\n\n    public tasks(startDate: string, endDate: string): string[]{\n        const dates = this.getDates(startDate, endDate);\n        const entries = dates.reduce((acc: Entry[], val)=>acc.concat(val.entries), [])\n\n        return entries.reduce((acc: string[], val: Entry)=>{\n            if(acc.indexOf(val.description) === -1){\n                acc.push(val.description);\n            }\n            return acc;\n        }, [])\n            .sort((a,b)=>a.localeCompare(b, 'en'))\n    }\n}","import {action, observable} from \"mobx\";\nimport {Entry} from \"./Entry\";\nimport {Day} from \"./Day\";\nimport {Row} from \"./Row\";\nimport {Project} from \"./Project\";\nimport {WorkSpace} from \"./WorkSpace\";\n\n\ninterface ITag {\n    name: string;\n    project: Project;\n}\n\nexport class Tag extends Row{\n    public name: string;\n    public project: Project;\n    public readonly type = 'tag';\n    @observable public entries: Entry[] = [];\n    @observable public days: Day[] = [];\n\n    constructor({name, project}: ITag, workSpace: WorkSpace) {\n        super({workSpace});\n        this.name = name;\n        this.project = project;\n    }\n\n    @action public addEntry(entry: Entry){\n        this.entries.push(entry);\n\n        let day = this.dateHash[entry.date.format('YYYYMMDD')];\n        if(!day){\n            day = new Day({date: entry.date});\n            this.days.push(day)\n        }\n        day.addEntry(entry);\n    }\n}","import {Day} from \"./Day\";\nimport {Entry} from \"./Entry\";\nimport {action, observable} from \"mobx\";\nimport {Tag} from \"./Tag\";\nimport {Row} from \"./Row\";\nimport {WorkSpace} from \"./WorkSpace\";\nimport {Group} from \"./Group\";\n\ninterface IProject {\n    pid: number;\n    project: string;\n    client: string;\n    project_hex_color: string;\n}\n\nexport class Project extends Row{\n    public pid: number;\n    public client: string;\n    // @observable public entries: Entry[] = [];\n    // @observable public days: Day[] = [];\n    @observable public tags: Tag[] = [];\n    public readonly type = 'project';\n\n    constructor({pid, project, client, project_hex_color}: IProject, workSpace: WorkSpace) {\n        super({workSpace});\n        this.rowId = pid.toString();\n        this.pid = pid;\n        this.name = project || \"Without Project\";\n        this.client = client;\n        this.color = project_hex_color;\n    }\n\n\n    @action public addEntry(entry: Entry){\n        this.entries.push(entry);\n\n        let day = this.dateHash[entry.date.format('YYYYMMDD')];\n        if(!day){\n            day = new Day({date: entry.date});\n            this.days.push(day)\n        }\n        day.addEntry(entry);\n\n        //Add entry to tag\n        let currentTag = this.tags.find(val=>val.name === entry.tags);\n\n        if(!currentTag){\n           currentTag = new Tag({name: entry.tags, project: this}, this.workSpace);\n           this.tags = this.tags\n               .concat([currentTag])\n               .sort((a,b)=>b.name.localeCompare(a.name, 'en', {numeric: true}));\n        }\n        currentTag.addEntry(entry);\n    }\n\n    public setGroup({group}: {group?: Group}){\n        this.workSpace.groups.forEach(workspaceGroup=>{\n            const projectIds = workspaceGroup.projectIds.filter(val=>val !== this.rowId);\n            if(workspaceGroup === group){\n                projectIds.push(this.rowId);\n            }\n            workspaceGroup.setProjectIds(projectIds);\n        })\n        this.workSpace.setGroups();\n    }\n}","import axios from 'axios';\nimport {Dayjs} from 'dayjs';\nimport {IUser} from \"./Interfaces/IUser\";\nimport {appState} from \"../App\";\nimport {ITaskResponse} from \"./Interfaces/ITaskResponse\";\n\n\nexport class Toggl{\n\n    static GetUser(apiKey: string): Promise<IUser>{\n        return new Promise((resolve, reject)=>{\n            axios.get('https://api.track.toggl.com/api/v9/workspaces', {\n                auth: {username: apiKey, password: \"api_token\"}\n            })\n                .then((result)=>{\n                    const workspaces = result.data;\n                    resolve({\n                        workspaces\n                    } as IUser)\n                    \n                    //resolve(result.data.data as IUser);\n                })\n                .catch(err=>reject(err));\n        })\n    }\n\n    static FetchDateRangeDetails(apiKey: string, user_id: number, workspace_id: string, startDate: Dayjs, endDate: Dayjs, page?: number): Promise<ITaskResponse[]>{\n        return new Promise((resolve, reject)=>{\n            let timeEntries: ITaskResponse[] = [];\n            //Note that Pages in Toggl begin at 1, not 0\n            const currentPage = page ? page : 1;\n\n            axios.get('https://track.toggl.com/reports/api/v2/details', {\n                params: {\n                    since: startDate.isBefore(endDate) ? startDate.format('YYYY-MM-DD') : endDate.format('YYYY-MM-DD'),\n                    until: startDate.isBefore(endDate) ? endDate.format('YYYY-MM-DD') : startDate.format('YYYY-MM-DD'),\n                    user_agent: window.location.origin,\n                    workspace_id: workspace_id.toString(),\n                    user_ids: appState.user?.id,\n                    page: currentPage\n                },\n                auth: {username: apiKey, password: \"api_token\"}\n            })\n                .then(result=>result.data)\n                .then((result: any)=> {\n                    timeEntries = timeEntries.concat(result.data);\n                    if(result.data.length < result.per_page){\n                        resolve(timeEntries);\n                    } else {\n                        /* Toggl rate limits calls at 1 per second. We'll add an extra second on each call\n                           to avoid running into trouble */\n                        setTimeout(()=>{\n                            Toggl.FetchDateRangeDetails(apiKey, user_id, workspace_id, startDate, endDate, currentPage + 1 )\n                                .then((result: ITaskResponse[])=>resolve(timeEntries.concat(result)))\n                                .catch(err=>reject(err));\n                        }, 1000)\n                    }\n                })\n                .catch(err=>{\n                    reject(err)\n                })\n        })\n    }\n}\n","import dayjs, {Dayjs} from \"dayjs\";\n\nexport interface IEntry {\n    description: string;\n    dur: number\n    start: string;\n    tags: string[];\n}\n\nexport class Entry{\n    description: string;\n    dur: number;\n    date: Dayjs;\n    tags: string;\n\n    constructor({description, dur, start, tags}: IEntry) {\n        this.description = description;\n        this.dur = dur;\n        this.date = dayjs(start);\n        this.tags = tags.join(', ');\n    }\n}","import {Project} from \"./Project\";\nimport {Row} from \"./Row\";\nimport {action, computed, observable} from \"mobx\";\nimport {Entry} from \"./Entry\";\nimport {WorkSpace} from \"./WorkSpace\";\nimport {Day} from \"./Day\";\n\ninterface IGroup {\n    rowId?: string,\n    name: string,\n    projectIds?: string[],\n    color?: string\n}\n\nexport class Group extends Row{\n    @observable public projectIds: string[] = [];\n    @observable public name: string = '';\n    public readonly type = 'group';\n\n    constructor({name, rowId, projectIds, color}: IGroup, workSpace: WorkSpace) {\n        super({workSpace});\n        this.name = name;\n        this.projectIds = projectIds || this.projectIds;\n        this.rowId = rowId || `Group_${name}`\n        this.color = color || this.color;\n    }\n\n    @computed public get projects(){\n        return this.workSpace.projects.filter(val=>this.projectIds.indexOf(val.rowId) > -1)\n    }\n\n    @computed public get days(){\n        //Sort into buckets of days\n\n        //Add all entries into date\n\n        return Object.values(this.projects.reduce((acc: {[key: string]: Day}, project)=>{\n            project.days.forEach(day=>{\n                if(!acc[day.date.format('YYYYMMDD')]){\n                    acc[day.date.format('YYYYMMDD')] = new Day({date: day.date});\n                }\n                day.entries.forEach(entry=>{\n                    acc[day.date.format('YYYYMMDD')].addEntry(new Entry({\n                        description: [project.client, project.name, entry.description].filter(v=>v).join(' / '),\n                        dur: entry.dur,\n                        start: entry.date.toISOString(),\n                        tags: entry.tags.split(', ')\n                    }));\n                })\n            })\n\n            return acc;\n        }, {}));\n    }\n\n    @action public setColor(color: string){\n        this.color = color;\n        this.workSpace.setGroups();\n    }\n\n    @action public setName(name: string){\n        this.name = name;\n        this.workSpace.setGroups();\n    }\n\n    @computed public get entries(){\n        return this.projects.reduce((acc: Entry[], val: Project)=>{\n            return acc.concat(val.entries);\n        }, [])\n    }\n\n    @action public setProjectIds(projectIds: string[]){\n        this.projectIds = projectIds;\n    }\n\n    public serialize(){\n        return JSON.stringify({\n            rowId: this.rowId,\n            name: this.name,\n            projectIds: this.projectIds,\n            color: this.color\n        })\n    }\n\n    public static deserialize(serialized: string, workSpace: WorkSpace){\n        const deserialized = JSON.parse(serialized) as IGroup;\n\n        return new Group(deserialized, workSpace)\n    }\n}\n\n","import {Project} from \"./Project\";\nimport {Dayjs} from \"dayjs\";\nimport {Toggl} from \"./Toggl\";\nimport {appState} from \"../App\";\nimport {action, computed, observable, runInAction} from \"mobx\";\nimport {ITaskResponse} from \"./Interfaces/ITaskResponse\";\nimport {Entry} from \"./Entry\";\nimport {DecimalToClockTime} from \"./Functions/DecimalToClockTime\";\nimport {DecimalToRoundedTime} from \"./Functions/DecimalToRoundedTime\";\nimport {Row} from \"./Row\";\nimport {Group} from \"./Group\";\nimport {Tag} from \"./Tag\";\n\nexport interface IWorkSpace{\n    id: number;\n    name: string;\n    api_token: string;\n}\n\nexport class WorkSpace{\n    public id: number;\n    public name: string;\n    public api_token: string;\n    @observable public projectOrder: string[] = [];\n    @observable public loading: boolean = true;\n    @observable public projects: Project[] = [];\n    @observable public groups: Group[] = [];\n    @observable public expanded: string[] = [];\n    @observable public rowToEmailHash: {[key: string]: string[]} = {};\n\n    constructor({id, name, api_token}: IWorkSpace, apiToken?: string) {\n        this.id = id;\n        this.name = name;\n        this.api_token = apiToken || api_token;\n        this.projectOrder = JSON.parse(window.localStorage.getItem(`workspaceOrder_${id}`) || '[]');\n        this.getGroups();\n        this.getExpanded();\n        this.getRowToEmailHash();\n    }\n\n    @action setExpanded(expanded: string[]){\n        this.expanded = expanded;\n        window.localStorage.setItem(`workspaceExpanded_${this.id}`, JSON.stringify(expanded));\n    }\n\n    @action public getExpanded(){\n        const serializedExpanded = window.localStorage.getItem(`workspaceExpanded_${this.id}`)\n        this.expanded = (JSON.parse(serializedExpanded || \"[]\"));\n    }\n\n    @action setEmailItem({rowId, emails}: {rowId: string, emails: string[]}){\n        this.rowToEmailHash[rowId] = emails;\n        window.localStorage.setItem(`workspaceEmailHash_${this.id}`, JSON.stringify(this.rowToEmailHash));\n    }\n\n    @computed public get emails(){\n        return Object.values(this.rowToEmailHash)\n            .reduce((acc, val)=>acc.concat(val), [])\n            .reduce((acc: string[], val)=>{\n                if(acc.indexOf(val)=== -1){\n                    acc.push(val);\n                }\n                return acc;\n            }, [])\n            .sort((a,b)=>a.localeCompare(b, 'en'));\n    }\n\n    @action public getRowToEmailHash(){\n        const serializedEmailHash = window.localStorage.getItem(`workspaceEmailHash_${this.id}`)\n        this.rowToEmailHash = (JSON.parse(serializedEmailHash || \"{}\"));\n    }\n\n    @computed public get emailToRowHash(){\n        return Object.keys(this.rowToEmailHash)\n            .reduce((acc: {[key: string]: string[]}, rowId)=>{\n                this.rowToEmailHash[rowId].forEach(email=>{\n                    if(!acc[email]){\n                        acc[email] = [];\n                    }\n                    acc[email].push(rowId);\n                })\n                return acc;\n            }, {})\n    }\n\n    @computed public get emailRows(){\n        return this.emails.map(email=>{\n\n            return {\n                email,\n                rows: this.emailToRowHash[email]?.map(rowId=>{\n                    if(this.GroupHash[rowId] && this.GroupHash[rowId].projects.length){\n                        return this.GroupHash[rowId]\n                    } else if(this.ProjectHash[rowId]){\n                        return this.ProjectHash[rowId]\n                    } else if(this.TagHash[rowId]){\n                        return this.TagHash[rowId]\n                    }\n                })\n                    .filter(val=>val) as Row[]\n            }\n\n        })\n    }\n\n    @computed public get GroupHash(){\n        return this.groups.reduce((acc: {[key: string]: Group}, val)=>{\n            acc[val.rowId] = val;\n            return acc;\n        }, {})\n    }\n\n    public get ProjectHash(){\n        const hash = this.projects.reduce((acc: {[key: string]: Project}, val)=>{\n            acc[val.rowId] = val;\n            return acc;\n        }, {})\n        return hash;\n    }\n\n    @computed public get TagHash(){\n        return this.projects.reduce((acc: {[key: string]: Tag}, val)=>{\n            val.tags\n                .filter(tag=>tag)\n                .forEach(tag=>{\n                    acc[tag.rowId] = tag;\n                })\n            return acc;\n        }, {})\n    }\n\n    public getGroups(){\n        const serializedGroups = window.localStorage.getItem(`workspaceGroups_${this.id}`)\n\n        this.groups = (JSON.parse(serializedGroups || \"[]\")).map((val: string)=>Group.deserialize(val, this))\n    }\n\n    public setGroups(){\n        const serializedGroups = JSON.stringify(this.groups.map(val=>val.serialize()));\n\n        window.localStorage.setItem(`workspaceGroups_${this.id}`, serializedGroups)\n    }\n\n    @action.bound public orderProject({ destination, source, reason }: any){\n        if(source && destination){\n\n            const currentOrder = this.projectOrder.slice();\n            const item = currentOrder.splice(source.index, 1).pop()!;\n\n            currentOrder.splice(destination.index, 0, item);\n\n            this.projectOrder = currentOrder;\n            window.localStorage.setItem(`workspaceOrder_${this.id}`, JSON.stringify(currentOrder));\n        }\n    }\n\n    @computed public get orderedProjects(): (Row | null)[]{\n        //Create a temporary array\n        const projectIdsInGroups = this.groups\n            .reduce((acc: string[], val)=>acc.concat(val.projectIds), []);\n\n        //Go through the Order list, pop out projects as they're found\n        return this.projectOrder.map(orderedId=>{\n            if(projectIdsInGroups.indexOf(orderedId) > -1) return null;\n            const project = this.projects.find(val=>val.rowId === orderedId);\n            if(project) return project;\n            const group = this.groups.find(val=>val.rowId === orderedId);\n            if(group && group.projects.length) return group;\n\n            return null;\n        })\n    }\n\n    @action public setLoading(state: boolean){\n        this.loading = state;\n    }\n\n    @action public createGroup(name: string){\n        var newGroup = new Group({name}, this);\n        if(!this.groups.filter(val=>val.rowId === newGroup.rowId).length){\n            this.groups = this.groups.concat(newGroup);\n            this.setGroups();\n\n            if(this.projectOrder.indexOf(newGroup.rowId) === -1){\n                this.projectOrder = this.projectOrder.concat([newGroup.rowId]);\n            }\n        }\n        return this.groups.find(val=>val.rowId === newGroup.rowId);\n    }\n\n    @action addTasksToProjects(taskResponses: ITaskResponse[]){\n        let projectHash: {[key: number]: Project} = {};\n        let projects: Project[] = []\n\n        taskResponses.forEach(taskResponse=>{\n            if(!taskResponse.pid){\n                taskResponse.pid = 0;\n            }\n\n            if(!projectHash[taskResponse.pid]){\n                const newProject = new Project(taskResponse, this)\n                projects.push(newProject)\n                projectHash[newProject.pid] = newProject;\n\n                if(this.projectOrder.indexOf(newProject.rowId) === -1){\n                    this.projectOrder = this.projectOrder.concat([newProject.rowId]);\n                }\n            }\n\n            projectHash[taskResponse.pid].addEntry(new Entry(taskResponse))\n\n        })\n        runInAction(()=>{\n            this.projects = projects;\n        })\n\n    }\n\n    public getTasks(startDate: Dayjs, endDate: Dayjs){\n        this.setLoading(true);\n        return new Promise((resolve, reject)=>{\n            if(appState.user?.id){\n                Toggl.FetchDateRangeDetails(this.api_token, appState.user.id, this.id.toString(), startDate, endDate)\n                    .then(result=>{\n                        this.addTasksToProjects(result);\n                        resolve(result)\n                    })\n                    .catch(err=>reject(err))\n                    .finally(()=>this.setLoading(false));\n            }\n        })\n    }\n\n    private sumDay(day: Dayjs){\n        return day ? this.projects.reduce((acc, val)=>{\n            return acc + (val.days.find(val=>val.date.isSame(day, 'day'))?.timeAsHours || 0);\n        }, 0) : 0;\n    }\n\n    private sumWeek(startDate: Dayjs, endDate: Dayjs){\n        return startDate && endDate ? this.projects.reduce((acc, val)=>{\n            return acc + val.timeAsHours(startDate.format('YYYY-MM-DD'), endDate.format('YYYY-MM-DD'));\n        }, 0): 0;\n    }\n\n    public sumDayClockTime(day: Dayjs){\n        return DecimalToClockTime(this.sumDay(day));\n    }\n\n    public sumDayRoundedHours(day: Dayjs){\n        return DecimalToRoundedTime(this.sumDay(day));\n    }\n\n    public sumWeekClockTime(startDate: Dayjs, endDate: Dayjs){\n        return DecimalToClockTime(this.sumWeek(startDate, endDate));\n    }\n\n    public sumWeekRoundedHours(startDate: Dayjs, endDate: Dayjs){\n        return DecimalToRoundedTime(this.sumWeek(startDate, endDate));\n    }\n\n    public toInterface(): IWorkSpace{\n        return {\n            id: this.id,\n            name: this.name,\n            api_token: this.api_token,\n        }\n    }\n}","import {IUser} from \"./Interfaces/IUser\";\n\nexport class User{\n    public id: number;\n    public fullname: string;\n\n    constructor({id, fullname}: IUser) {\n        this.id = id;\n        this.fullname = fullname;\n    }\n\n    public toInterface(){\n        return {\n            id: this.id,\n            fullname: this.fullname,\n        }\n    }\n}","import {Settings} from \"./Settings\";\nimport {IWorkSpace, WorkSpace} from \"./WorkSpace\";\nimport {Toggl} from \"./Toggl\";\nimport {action, observable} from \"mobx\";\nimport {User} from \"./User\";\n\nexport class AppState{\n    public readonly settings: Settings;\n    @observable public user?: User;\n    @observable public workSpaces: WorkSpace[] = [];\n    @observable public selectedWorkSpace?: WorkSpace;\n\n    constructor() {\n        this.settings = new Settings();\n\n        if(this.settings.apiToken){\n            const workSpaces = JSON.parse(window.localStorage.getItem(\"workSpaces\") || \"[]\") as IWorkSpace[];\n            const user = window.localStorage.getItem(\"user\") ? JSON.parse(window.localStorage.getItem(\"user\")||\"\") : undefined;\n            this.setWorkSpaces(workSpaces.map(val=>new WorkSpace(val)))\n            this.setUser(user ? new User(user) : undefined);\n        }\n\n        this.getWorkSpaces = this.getWorkSpaces.bind(this);\n    }\n\n    @action public selectWorkSpace(workSpace?: WorkSpace){\n        this.selectedWorkSpace = workSpace;\n        window.localStorage.setItem(\"workSpaceId\", this.selectedWorkSpace?.id.toString() || \"\");\n    }\n\n    @action public setUser(user?: User){\n        this.user = user;\n        if(user){\n            window.localStorage.setItem(\"user\", JSON.stringify(user.toInterface()));\n        } else {\n            window.localStorage.removeItem(\"user\");\n        }\n    }\n\n    public getWorkSpaces(){\n        if(this.settings.apiToken){\n            Toggl.GetUser(this.settings.apiToken)\n                .then(user=>{\n                    this.setUser(new User(user));\n                    this.setWorkSpaces(user.workspaces.map(val=>new WorkSpace(val, this.settings.apiToken)))\n                })\n                .catch(err=>alert(err));\n\n        }\n    }\n\n    @action private setWorkSpaces(workSpaces: WorkSpace[]){\n        this.workSpaces = workSpaces.sort((a,b)=>a.name.toLowerCase().localeCompare(b.name.toLowerCase(), 'en', {numeric: true}));\n\n        window.localStorage.setItem(\"workSpaces\", JSON.stringify(this.workSpaces.map(val=>val.toInterface())));\n\n        const lastSelectedWorkSpace = window.localStorage.getItem(\"workSpaceId\");\n\n        if(lastSelectedWorkSpace){\n            this.selectWorkSpace(this.workSpaces.find(val=>val.id.toString() === lastSelectedWorkSpace))\n        }\n    }\n}","import React from \"react\";\nimport {Dayjs} from \"dayjs\";\n\nexport const HeaderDate = ({date}: {date: Dayjs})=>{\n    return <div style={{overflow: \"hidden\"}}>\n        <div>{date.format('dddd')}</div>\n        <div>{date.format('MMM D')}</div>\n    </div>\n}","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Dayjs} from \"dayjs\";\nimport {HeaderDate} from \"./HeaderDate\";\n\nexport const HeaderRow = observer(({dates, gridCols}: {dates: Dayjs[], gridCols: string})=>{\n    return (\n        <div className={\"row header\"} style={{gridTemplateColumns: gridCols}}>\n            <div/>\n            <div>Project</div>\n            <div>Company</div>\n            {dates.map((val, index)=>(<HeaderDate key={index} date={val}/>))}\n            <div className={'sumCol'}>Sum of Time</div>\n        </div>\n    )\n})","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\n\nexport const ExpandButton = observer(({expanded, setExpanded}: {expanded: boolean, setExpanded: Function})=>{\n    return <button className={'expander'} onClick={() => setExpanded(!expanded)}>\n        <div className={`rotater ${expanded ? \"rotated\" : \"\"}`}>\n            &#9654;\n        </div>\n    </button>\n})","import React, {ReactElement, useState} from \"react\";\nimport {Day} from \"../../Utilities/Day\";\nimport Tippy from \"@tippyjs/react\";\nimport 'tippy.js/dist/tippy.css';\n\nexport const Cell = ({day, displayType, expanded}: { day?: Day, displayType: string, expanded: boolean }) => {\n\n\n    const [visible, setVisible] = useState(false);\n    const show = () => setVisible(true);\n    const hide = () => setVisible(false);\n\n    function copyToClipboard(event: React.MouseEvent) {\n        const range = document.createRange();\n        const textNode = event.currentTarget;\n        if (textNode) {\n            range.selectNode(textNode);\n            window.getSelection()?.removeAllRanges();\n            window.getSelection()?.addRange(range);\n            document.execCommand(\"copy\");\n            show();\n            setTimeout(()=>{\n                hide();\n            }, 2000)\n        }\n    }\n\n    let value: string | ReactElement | ReactElement[] = \"\";\n    let valueString: string = '';\n\n    if(day){\n        switch(displayType){\n            case \"description\":\n                value = day.tasks.map((v, index)=>(<div key={index}>{v}</div>));\n                valueString = day.tasks.join('\\n');\n                break;\n            case \"time\":\n                value = day.hours;\n                valueString = day.hours;\n                break;\n            case \"roundedTime\":\n                value = day.roundedHours;\n                valueString = day.roundedHours;\n                break;\n            case \"tasksAndTime\":\n                value = day.tasksAndRoundedTime.map((v, index)=>(<div key={index}>{v}</div>));\n                valueString = day.tasksAndRoundedTime.join('\\n');\n                break;\n        }\n    }\n\n    return (\n        // <div className={`dateCol ${expanded ? 'expanded' : ''}`} title={valueString}>\n         <div className={`dateCol`} title={valueString}>\n            <Tippy\n                content={`Copied: \\n ${valueString}`}\n                visible={visible}\n                onClickOutside={hide}\n            >\n                <button onClick={copyToClipboard}>\n                    {value}\n                </button>\n            </Tippy>\n        </div>)\n}","import {DecimalToRoundedTime} from \"./DecimalToRoundedTime\";\nimport {DecimalToClockTime} from \"./DecimalToClockTime\";\n\nexport function DecimalToDisplayType(decimalHours: number, displayType: string){\n\n    switch(displayType){\n        case \"description\": return DecimalToRoundedTime(decimalHours);\n        case \"time\": return DecimalToClockTime(decimalHours);\n        case \"roundedTime\": return DecimalToRoundedTime(decimalHours);\n        case \"tasksAndTime\": return DecimalToRoundedTime(decimalHours);\n    }\n}","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport Creatable from \"react-select/creatable\";\nimport Popup from \"reactjs-popup\";\nimport {Tag} from \"../../Utilities/Tag\";\n\nexport const TagMenu = observer(({tag, setOpen}: {tag: Tag, setOpen: Function})=>{\n\n    return (<Popup\n        onOpen={()=>setOpen(true)}\n        onClose={()=>setOpen(false)}\n        trigger={<div>\n            <button className={'menuButton'}>&#9679;&#9679;&#9679;</button>\n        </div>} position={\"left center\"}>\n        <div style={{\n            backgroundColor: '#fff',\n            border: `1px solid ${tag.color}`,\n            padding: '10px',\n            width: '200px',\n            boxShadow: `0 2px .8rem ${tag.color}`\n        }}>\n            Set Emails\n            <Creatable\n                placeholder={\"Select or Create New\"}\n                isMulti={true}\n                value={tag.emails.map(val=>({value: val, label: val}))}\n                options={tag.workSpace.emails.map(val=>({value: val, label: val}))}\n                onCreateOption={tag.createEmail}\n                //@ts-ignore\n                onChange={(item)=>tag.setEmails((item || []).map(val=>val.value))}\n            />\n        </div>\n    </Popup>)\n})","import React, {useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Tag} from \"../../Utilities/Tag\";\nimport {ExpandButton} from \"../ExpandButton\";\nimport {Cell} from \"./Cell\";\nimport {DecimalToDisplayType} from \"../../Utilities/Functions/DecimalToDisplayType\";\nimport {Dayjs} from \"dayjs\";\nimport {TagMenu} from \"./TagMenu\";\n\nexport const TagRow = observer(({tag, dates, displayType, gridCols, inheritBackgroundColor}: {tag: Tag, dates: Dayjs[], displayType: string, gridCols: string, inheritBackgroundColor?: boolean})=>{\n    const [open, setOpen] = useState(false);\n    return (\n        <div className={'rowContainer'}\n             style={{\n                 boxShadow: `${open ? '0 2px .8rem' : \"0 0 0\"} ${tag.color}`\n             }}>\n            <div className={\"row tagRow\"} style={{\n                gridTemplateColumns: gridCols,\n                borderColor: tag.project.color,\n                backgroundColor: inheritBackgroundColor ? \"rgba(255,255,255,0.9)\" : \"#FFF\"}}>\n                <div/>\n                <ExpandButton expanded={tag.expanded} setExpanded={tag.setExpanded}/>\n                <div className={''} style={{color: tag.project.color}}>{tag.name || \"--Untagged--\"}</div>\n                {/*<div className={'title'} style={{color: tag.project.color}}>{tag.project.client}</div>*/}\n                {dates.map((val, index)=>(<Cell key={index} expanded={tag.expanded} displayType={displayType} day={tag.dateHash[val.format('YYYYMMDD')]}/>))}\n                <div className={'title sumCol'} style={{color: tag.project.color}}>{DecimalToDisplayType(tag.timeAsHours(dates[0]?.toISOString(), dates[dates.length -1]?.toISOString()), displayType)}</div>\n                {tag.name ? <TagMenu tag={tag} setOpen={setOpen}/> : <React.Fragment/>}\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {Dayjs} from \"dayjs\";\nimport {Row} from \"../../Utilities/Row\";\nimport {DecimalToDisplayType} from \"../../Utilities/Functions/DecimalToDisplayType\";\n\nexport const FooterDate = ({day, rows, displayType}: {day: Dayjs, rows: (Row|null)[], displayType: string})=>{\n    const decimalHours = rows.reduce((acc, row)=>{\n        return acc + (row?.dateHash[day.format('YYYYMMDD')]?.timeAsHours || 0)\n    }, 0);\n\n    return <div>\n        <div className={'title'}>{DecimalToDisplayType(decimalHours, displayType)}</div>\n    </div>\n}","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Dayjs} from \"dayjs\";\nimport {Row} from \"../../Utilities/Row\";\nimport {FooterDate} from \"./FooterDate\";\nimport {DecimalToDisplayType} from \"../../Utilities/Functions/DecimalToDisplayType\";\n\nexport const FooterRow = observer(({dates, rows, displayType, gridCols}: {dates: Dayjs[], rows: (Row|null)[], displayType: string, gridCols: string})=>{\n    const decimalHours = dates\n        .reduce((acc, day)=>{\n        return acc + rows.reduce((acc, row)=>{\n            return acc + (row?.dateHash[day.format('YYYYMMDD')]?.timeAsHours || 0)\n        }, 0);\n    }, 0);\n\n    return (\n        <div className={\"row projectRow\"} style={{gridTemplateColumns: gridCols}}>\n            <div/>\n            <div className={'title'}>Total</div>\n            <div/>\n            {dates.map((val, index)=>(<FooterDate key={index} day={val} rows={rows} displayType={displayType}/>))}\n            <div className={'title sumCol'}>{DecimalToDisplayType(decimalHours, displayType)}</div>\n        </div>\n    )\n})","import React from 'react';\n\nexport const Loading = (()=>{\n    return (<div className=\"lds-ripple\"><div/><div/></div>)\n})","import React, {useMemo} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport Creatable from \"react-select/creatable\";\nimport Popup from \"reactjs-popup\";\nimport {Project} from \"../../Utilities/Project\";\nimport {Group} from \"../../Utilities/Group\";\nimport {appState} from \"../../App\";\nimport {WorkSpaceSelect} from \"../WorkSpaceSelect\";\n\nexport const ProjectMenu = observer(({project, setOpen}: {project: Project, setOpen: Function})=>{\n    const workSpace = useMemo(()=>{\n        return appState.selectedWorkSpace;\n    }, [])\n    if(!workSpace){\n        return <WorkSpaceSelect/>\n    }\n\n    function selectGroup(group?: Group){\n        project.setGroup({group});\n    }\n\n    function createGroup(groupName: string){\n        const group = workSpace?.createGroup(groupName);\n        project.setGroup({group});\n    }\n\n    const options: {label: string, value: string, data?: any}[] = [\n        {label: 'No Group', value: '', data: new Group({name: ''}, workSpace)}\n    ]\n        .concat((workSpace?.groups || []).map(val=>({\n            label: val.name,\n            value: val.rowId,\n            data: val\n        })));\n\n    return (<Popup\n        onOpen={()=>setOpen(true)}\n        onClose={()=>setOpen(false)}\n        trigger={<div>\n            <button className={'menuButton'}>&#9679;&#9679;&#9679;</button>\n        </div>} position={\"left center\"}>\n        <div style={{\n            backgroundColor: '#fff',\n            border: `1px solid ${project.color}`,\n            padding: '10px',\n            width: '200px',\n            boxShadow: `0 2px .8rem ${project.color}`\n        }}>\n            Add to Group\n            <Creatable\n                placeholder={\"Select or Create New\"}\n                value={options.find(val=>val.data.projectIds.indexOf(project.rowId) > -1)}\n                options={options}\n                onCreateOption={createGroup}\n                //@ts-ignore\n                onChange={(item)=>selectGroup(item.data)}\n            />\n            Set Emails\n            <Creatable\n                placeholder={\"Select or Create New\"}\n                isMulti={true}\n                value={project.emails.map(val=>({value: val, label: val}))}\n                options={project.workSpace.emails.map(val=>({value: val, label: val}))}\n                onCreateOption={project.createEmail}\n                //@ts-ignore\n                onChange={(item)=>project.setEmails((item || []).map(val=>val.value))}\n            />\n        </div>\n    </Popup>)\n})","import React, {useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Project} from \"../../Utilities/Project\";\nimport {Dayjs} from \"dayjs\";\nimport {Cell} from \"./Cell\";\nimport {ExpandButton} from \"../ExpandButton\";\nimport {DecimalToDisplayType} from \"../../Utilities/Functions/DecimalToDisplayType\";\nimport {TagRow} from \"./TagRow\";\nimport {ProjectMenu} from \"./ProjectMenu\";\n\nexport const ProjectRow = observer(({project, dates, displayType, gridCols, isDragging, inheritBackgroundColor}: {project: Project, dates: Dayjs[], displayType: string, gridCols: string, isDragging: boolean, inheritBackgroundColor?: boolean})=>{\n    const [open, setOpen] = useState(false);\n\n    return (\n        <div className={'rowContainer'}\n             style={{\n                 boxShadow: `${isDragging || open ? '0 2px .8rem' : \"0 0 0\"} ${project.color}`\n             }}>\n            <div\n                className={`row projectRow ${isDragging ? 'selected' : ''}`}\n                style={{\n                    gridTemplateColumns: gridCols,\n                    borderColor: project.color,\n                    borderWidth: '2px',\n                    borderStyle: 'solid',\n                    borderTopColor: project.color,\n                    borderLeftColor: open ? project.color : \"rgba(0,0,0,0)\",\n                    borderRightColor: open ? project.color : \"rgba(0,0,0,0)\",\n                    borderBottomColor: open ? project.color : \"rgba(0,0,0,0)\",\n                    backgroundColor: inheritBackgroundColor ? \"rgba(255,255,255,0.75)\" : \"#FFF\"\n                }}>\n                <ExpandButton expanded={project.expanded} setExpanded={project.setExpanded}/>\n                <div className={'title'} style={{color: project.color}}>{project.name}</div>\n                <div className={'title'} style={{color: project.color}}>{project.client}</div>\n                {dates.map((val, index)=>(<Cell key={index} expanded={project.expanded} displayType={displayType} day={project.dateHash[val.format('YYYYMMDD')]}/>))}\n                <div className={'title sumCol'} style={{color: project.color}}>{DecimalToDisplayType(project.timeAsHours(dates[0]?.toISOString(), dates[dates.length -1]?.toISOString()), displayType)}</div>\n                <ProjectMenu project={project} setOpen={setOpen}/>\n            </div>\n            {project.expanded ?\n                project.tags.map((tag, index)=>{\n                    return (<TagRow key={index} tag={tag} dates={dates} displayType={displayType} gridCols={gridCols} inheritBackgroundColor={inheritBackgroundColor}/>)\n                })\n                : <React.Fragment/>}\n        </div>\n    )\n})","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Project} from \"../../Utilities/Project\";\nimport {Dayjs} from \"dayjs\";\nimport {Draggable} from \"react-beautiful-dnd\";\nimport {ProjectRow} from \"./ProjectRow\";\n\nexport const ProjectRowDraggable = observer(({project, dates, displayType, gridCols, index}: {project: Project, dates: Dayjs[], displayType: string, gridCols: string, index: number})=>{\n\n    return (\n        <Draggable\n            key={project?.pid?.toString()}\n            draggableId={project?.pid?.toString()}\n            index={index}\n        >\n            {(provided, snapshot) => (\n                <div\n                    id={project?.rowId}\n                    ref={provided.innerRef}\n                    className={`rowContainer ${snapshot.isDragging ? 'selected' : ''}`}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                >\n                    <ProjectRow project={project} dates={dates} displayType={displayType} gridCols={gridCols} isDragging={snapshot.isDragging}/>\n                </div>\n            )}\n        </Draggable>\n    )\n})","import React from 'react';\n\nexport const NoContent = (()=>{\n    return (<div style={{height: '100px', display: \"flex\", alignItems: 'center', justifyContent: 'center'}}><div>-- No Projects Found --</div></div>)\n})","import React from \"react\";\n\nexport const EmptyRow = ()=>{\n    return (\n        <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '3rem', borderTop: '1px dashed #888'}}>\n            <div>\n                -- Empty --\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Group} from \"../../Utilities/Group\";\nimport Popup from \"reactjs-popup\";\nimport Creatable from \"react-select/creatable\";\n\nexport const GroupMenu = observer(({group, setOpen}: {group: Group, setOpen: Function})=>{\n    return (<Popup\n        onOpen={()=>setOpen(true)}\n        onClose={()=>setOpen(false)}\n        trigger={<div>\n            <button className={'menuButton'}>&#9679;&#9679;&#9679;</button>\n        </div>} position={\"left center\"}>\n        <div style={{\n            backgroundColor: '#fff',\n            border: `1px solid ${group.color}`,\n            padding: '10px',\n            width: '200px',\n            boxSizing: 'border-box',\n            boxShadow: `0 2px .8rem ${group.color}`\n        }}>\n\n\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n                <label htmlFor={`name_${group.rowId}`} style={{marginRight: '10px'}}>Name</label>\n                <input  name={`name_${group.rowId}`} type={'text'} value={group.name} onChange={(e)=>{group.setName(e.currentTarget.value)}}/>\n            </div>\n\n            <div style={{display: 'flex', marginTop: '20px',  flexDirection: 'column'}}>\n                <label htmlFor={`color_${group.rowId}`} style={{marginRight: '10px'}}>Set Color</label>\n                <input style={{width: '100%'}} name={`color_${group.rowId}`} type={'color'} value={group.color} onChange={(e)=>{group.setColor(e.currentTarget.value)}}/>\n            </div>\n\n\n            <div style={{display: 'flex', marginTop: '20px',  flexDirection: 'column'}}>\n                Set Emails\n                <Creatable\n                    placeholder={\"Select or Create New\"}\n                    isMulti={true}\n                    value={group.emails.map(val=>({value: val, label: val}))}\n                    options={group.workSpace.emails.map(val=>({value: val, label: val}))}\n                    onCreateOption={group.createEmail}\n                    //@ts-ignore\n                    onChange={(item)=>group.setEmails((item || []).map(val=>val.value))}\n                />\n            </div>\n        </div>\n    </Popup>)\n})","import React, {useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Group} from \"../../Utilities/Group\";\nimport {Dayjs} from \"dayjs\";\nimport {ExpandButton} from \"../ExpandButton\";\nimport {Cell} from \"./Cell\";\nimport {DecimalToDisplayType} from \"../../Utilities/Functions/DecimalToDisplayType\";\nimport {EmptyRow} from \"./ExmptyRow\";\nimport {ProjectRow} from \"./ProjectRow\";\nimport {GroupMenu} from \"./GroupMenu\";\n\nexport const GroupRow = observer(({group, dates, displayType, gridCols, isDragging}: {group: Group, dates: Dayjs[], displayType: string, gridCols: string, isDragging: boolean})=>{\n    const [open, setOpen] = useState(false);\n    const color = group.color || \"#ff8330\";\n    const textColor = \"white\";\n\n    return (\n        <div className={'rowContainer'}\n             style={{\n                 backgroundColor: color,\n                 boxShadow: `${isDragging || open ? '0 2px .8rem' : \"0 0 0\"} ${color}`,\n             }}>\n            <div\n                className={\"row projectRow\"}\n                style={{\n                    backgroundColor: color,\n                    borderColor: color,\n                    gridTemplateColumns: gridCols,\n                }}>\n                <ExpandButton expanded={group.expanded} setExpanded={group.setExpanded}/>\n                <div className={'title'} style={{color: textColor}}>{group.name}</div>\n                <div className={'title'} style={{color: textColor}}/>\n                {dates.map((val, index)=>(<Cell key={index} expanded={group.expanded} displayType={displayType} day={group.dateHash[val.format('YYYYMMDD')]}/>))}\n                <div className={'title sumCol'} style={{color: textColor}}>\n                    {DecimalToDisplayType(group.timeAsHours(dates[0]?.toISOString(), dates[dates.length -1]?.toISOString()), displayType)}\n                </div>\n                <GroupMenu group={group} setOpen={setOpen}/>\n            </div>\n            {group.expanded ?\n                <React.Fragment>\n                    {group.projects.length ? group.projects.map((project, index)=>{\n                        return (<ProjectRow key={index} project={project} dates={dates} displayType={displayType} gridCols={gridCols} isDragging={isDragging} inheritBackgroundColor={true}/>)\n                    }) : <EmptyRow/>}\n                </React.Fragment>\n                : <React.Fragment/>}\n            <div>\n            </div>\n        </div>\n    )\n})","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Dayjs} from \"dayjs\";\nimport {Draggable} from \"react-beautiful-dnd\";\nimport {GroupRow} from \"./GroupRow\";\nimport {Group} from \"../../Utilities/Group\";\n\nexport const GroupRowDraggable = observer(({group, dates, displayType, gridCols, index}: {group: Group, dates: Dayjs[], displayType: string, gridCols: string, index: number})=>{\n\n    return (\n        <Draggable\n            key={group?.rowId?.toString()}\n            draggableId={group?.rowId?.toString()}\n            index={index}\n        >\n            {(provided, snapshot) => (\n                <div\n                    id={group?.rowId}\n                    ref={provided.innerRef}\n                    className={`rowContainer ${snapshot.isDragging ? 'selected' : ''}`}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                >\n                    <GroupRow group={group} dates={dates} displayType={displayType} gridCols={gridCols} isDragging={snapshot.isDragging}/>\n                </div>\n            )}\n        </Draggable>\n    )\n})","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {WorkSpace} from \"../../Utilities/WorkSpace\";\nimport {Dayjs} from \"dayjs\";\nimport {HeaderRow} from \"./HeaderRow\";\nimport \"./DivCalendar.css\";\nimport {Row} from \"../../Utilities/Row\";\nimport {Group} from \"../../Utilities/Group\";\nimport {Project} from \"../../Utilities/Project\";\nimport {Tag} from \"../../Utilities/Tag\";\nimport {TagRow} from \"./TagRow\";\nimport {FooterRow} from \"./FooterRow\";\nimport {Loading} from \"../Loading\";\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\nimport {ProjectRowDraggable} from \"./ProjectRowDraggable\";\nimport {NoContent} from \"../NoContent\";\nimport {GroupRowDraggable} from \"./GroupRowDraggable\";\n\nexport const CalendarContainer = observer(({workSpace, displayType, dates}: {workSpace: WorkSpace, displayType: string, dates: Dayjs[]})=>{\n\n    const gridCols = `40px 150px 100px repeat(${dates.length}, 1fr) 75px 50px`\n    return (\n        <div className={\"divCalendar container\"}>\n            <HeaderRow dates={dates} gridCols={gridCols}/>\n            {workSpace.loading ? (\n                    <div className={'row'}>\n                        <div className={'loading'} ><Loading/></div>\n                    </div>\n                ) :\n                <DragDropContext onDragEnd={workSpace.orderProject}>\n                    <Droppable droppableId={'calendarContainer'} type={\"containerDroppable\"}>\n                        {(provided, snapshot) => (\n                            <div\n                                id={\"calendarContainer\"}\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                            >\n                                {workSpace.orderedProjects.length ? workSpace.orderedProjects.map((val: (Row | null), index)=>{\n                                    if(!val) return <React.Fragment key={index}/>;\n\n                                    switch (val.type) {\n                                        case \"group\": return <GroupRowDraggable key={val.rowId} group={val as Group} dates={dates} displayType={displayType} gridCols={gridCols} index={index}/>;\n                                        case \"project\": return <ProjectRowDraggable key={val.rowId} dates={dates} displayType={displayType} project={val as Project} gridCols={gridCols} index={index}/>;\n                                        case \"tag\": return <TagRow key={val.rowId} tag={val as Tag} dates={dates} displayType={displayType} gridCols={gridCols}/>;\n                                        default: return <React.Fragment key={index}/>\n                                    }\n                                }) : <NoContent/>}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            }\n            <FooterRow dates={dates} rows={workSpace.orderedProjects} gridCols={gridCols} displayType={displayType}/>\n        </div>\n    )\n});","export function splitQuery(query: string){\n    return query\n        .slice(1)\n        .split('&')\n        .map(val=>(\n            val.split('=')\n        ))\n        .reduce((acc: {[key: string]: string}, val)=>{\n            acc[val[0]] = val[1];\n            return acc;\n        }, {})\n}","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\n\nexport const DisplayTypeSelect = observer(({displayType, setDisplayType}: { displayType: string, setDisplayType: Function }) => {\n\n    function setValue(value: any) {\n        setDisplayType(value)\n        window.localStorage.setItem('displayType', value);\n    }\n\n    return <div style={{display: 'flex'}}>\n        <DisplayTypeButton name={\"Time\"} currentValue={displayType} value={'time'} setValue={setValue}/>\n        <DisplayTypeButton name={\"Rounded Time\"} currentValue={displayType} value={'roundedTime'} setValue={setValue}/>\n        <DisplayTypeButton name={\"Description\"} currentValue={displayType} value={'description'} setValue={setValue}/>\n        <DisplayTypeButton name={\"Time & Description\"} currentValue={displayType} value={'tasksAndTime'} setValue={setValue}/>\n    </div>\n})\n\nconst DisplayTypeButton = observer(({name, currentValue, value, setValue}:\n                                        {name: string, currentValue: string, value: string, setValue: Function})=>{\n    return (\n        <button\n            className={`calendarHeaderButton ${value === currentValue ? 'selected' : ''}`}\n            onClick={()=>setValue(value)}\n        >\n            {name}\n        </button>\n    )\n})","import React, {useEffect} from \"react\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport {splitQuery} from \"../Utilities/Functions/SplitQuery\";\nimport {appState} from \"../App\";\n\nexport const CalendarDateNav = ()=>{\n    const location = useLocation();\n    const {startDate, endDate} = splitQuery(location.search);\n    const history = useHistory();\n\n    const navLinks = {\n        back: `/calendar?startDate=${\n            dayjs(startDate).subtract(1, 'week').format('YYYY-MM-DD')\n        }&endDate=${dayjs(endDate).subtract(1, 'week').format('YYYY-MM-DD')}`,\n        today:`/calendar?startDate=${\n            dayjs().startOf('week').format('YYYY-MM-DD')\n        }&endDate=${dayjs().endOf('week').format('YYYY-MM-DD')}`,\n        forward:`/calendar?startDate=${\n            dayjs(startDate).add(1, 'week').format('YYYY-MM-DD')\n        }&endDate=${dayjs(endDate).add(1, 'week').format('YYYY-MM-DD')}`\n    }\n\n    function clickToday(event: any){\n        //Force refresh of tasks if clicked when on this week\n        if(navLinks.today.split('?').pop() === window.location.search.split('?').pop()){\n            event.stopPropagation();\n            appState.selectedWorkSpace?.getTasks(dayjs(startDate), dayjs(endDate))\n                .catch(err=>{\n                    alert(err);\n                    console.error(err)\n                });\n        }\n    }\n\n    useEffect(()=>{\n            if(!startDate || !endDate){\n                history.push(`/calendar?startDate=${\n                    dayjs().startOf('week').format('YYYY-MM-DD')\n                }&endDate=${dayjs().endOf('week').format('YYYY-MM-DD')}`)\n            }\n        }\n        // Needed to ignore history\n        // eslint-disable-next-line\n        , [startDate, endDate])\n\n    return (\n        <div>\n            <Link to={navLinks.back}><button className={'calendarHeaderButton'}>&lt;</button></Link>\n            <Link to={navLinks.today} onClick={clickToday}><button className={'calendarHeaderButton'}>Today</button></Link>\n            <Link to={navLinks.forward}><button className={'calendarHeaderButton'}>&gt;</button></Link>\n        </div>\n    )\n}","import React from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {WorkSpace} from \"../Utilities/WorkSpace\";\nimport {Row} from \"../Utilities/Row\";\nimport {Project} from \"../Utilities/Project\";\nimport {Tag} from \"../Utilities/Tag\";\nimport {Group} from \"../Utilities/Group\";\n\nexport const EmailList = observer(({workSpace, startDate, endDate}: {workSpace: WorkSpace, startDate: string, endDate: string})=>{\n\n    return (<div>\n        <hr/>\n\n        <h3>Emails</h3>\n        <table style={{width: '100%'}}>\n            <thead>\n            <tr>\n                <th style={{width: '20rem'}}>Email</th>\n                <th>Projects</th>\n                <th style={{width: '300px', textAlign: \"right\"}}>Email Types</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            {workSpace.emailRows\n                .filter(val=>val.rows.length)\n                .map((val, index)=>(<EmailRow key={index}\n                                              rows={val.rows}\n                                              email={val.email}\n                                              startDate={startDate}\n                                              endDate={endDate}\n                />))}\n            </tbody>\n        </table>\n    </div>)\n})\n\nconst EmailRow = observer(({rows, email, startDate, endDate}: {email: string, rows: Row[], startDate: string, endDate: string})=>{\n    const projects = rows.reduce((acc: Project[], row)=>{\n        if(row instanceof Project) return acc.concat([row])\n        if(row instanceof Tag) return acc.concat([row.project])\n        if(row instanceof Group) return acc.concat(row.projects)\n\n        return acc;\n    }, [])\n\n    const addressee = email.split('@').shift()?.split('.').shift();\n\n    const bodyStart = `Hi ${addressee}, %0A%0A`\n\n    const subject = `Timekeeping: ${projects.map(val=>`${val.client} ${val.name}`.trim()).join(', ')}`;\n    const timeBody = rows.map(val=>`${val.name} (${val.roundedHours(startDate, endDate)})`).join(\"%0A\");\n    const timeAndTaskBody = rows.map(val=>{\n        return [`${val.name} (${val.roundedHours(startDate, endDate)})`].concat(val.tasks(startDate, endDate).map(val=>`     ${val}`)).join(\"%0A\");\n    }).join(\"%0A\");\n\n    return (\n        <tr>\n            <td>{email}</td>\n            <td>{rows.map(val=>(<div className={'emailProject'} style={{color: val.color}}>({val.roundedHours(startDate, endDate)}) {val?.name}</div>))}</td>\n            <td>\n                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n\n                    <a href={`mailto:${email}?subject=${subject}&body=${bodyStart + timeBody}`} target={'_blank'} rel={\"noopener noreferrer\"}>\n                        <button className={'calendarHeaderButton '}>Time</button>\n                    </a>\n                    <a href={`mailto:${email}?subject=${subject}&body=${bodyStart + timeAndTaskBody}`} target={'_blank'} rel={\"noopener noreferrer\"}>\n                        <button className={'calendarHeaderButton '}>Time and Description</button>\n                    </a>\n                </div>\n            </td>\n        </tr>)\n})","import React, {useEffect, useState} from \"react\";\nimport {Layout} from \"../Components/Layout\";\nimport {appState} from \"../App\";\nimport {CalendarContainer} from \"../Components/DivCalendar/Container\";\nimport {useLocation} from \"react-router\";\nimport dayjs, {Dayjs} from \"dayjs\";\nimport {splitQuery} from \"../Utilities/Functions/SplitQuery\";\nimport {DisplayTypeSelect} from \"../Components/DisplayTypeSelect\";\nimport {CalendarDateNav} from \"../Components/CalendarDateNav\";\nimport {EmailList} from \"../Components/EmailList\";\n\nexport const CalendarPage = () =>{\n\n    const location = useLocation();\n    const {startDate, endDate} = splitQuery(location.search);\n\n    const [displayType, setDisplayType] = useState<'time' | 'description' | 'roundedTime'>(window.localStorage.getItem('displayType') as any || 'time')\n\n\n    const dates: Dayjs[] = [];\n    if(startDate && endDate){\n        let startPoint = dayjs(startDate);\n        while(startPoint.isBefore(dayjs(endDate), 'day') || startPoint.isSame(dayjs(endDate), 'day')){\n            dates.push(startPoint);\n            startPoint = startPoint.add(1, 'day');\n        }\n    }\n\n    const workspace_id = appState.selectedWorkSpace?.id;\n    useEffect(()=>{\n            if(appState.selectedWorkSpace && startDate && endDate){\n                appState.selectedWorkSpace\n                    .getTasks(dayjs(startDate), dayjs(endDate))\n                    .catch(err=>{\n                        alert(err);\n                        console.error(err)\n                    });\n            }\n        }\n        , [workspace_id, startDate, endDate])\n\n    return (\n        <Layout>\n            <h2>Calendar</h2>\n\n            <div style={{display: 'flex', marginBottom: '20px'}}>\n                <DisplayTypeSelect displayType={displayType} setDisplayType={setDisplayType}/>\n                <div style={{flex: 1}}/>\n                <CalendarDateNav/>\n            </div>\n\n            {appState.selectedWorkSpace ?\n                <CalendarContainer workSpace={appState.selectedWorkSpace} displayType={displayType} dates={dates}/> : \"\"}\n\n            {appState.selectedWorkSpace && appState.selectedWorkSpace.emails.length ?\n                <EmailList workSpace={appState.selectedWorkSpace} startDate={startDate} endDate={endDate}/> : <React.Fragment/> }\n        </Layout>\n    )\n}","import React from \"react\";\nimport {Layout} from \"../Components/Layout\";\nimport { Link } from \"react-router-dom\";\n\nexport const MainPage = ()=>{\n    return (\n        <Layout>\n            <h2>What is Toggl Calendar View?</h2>\n            <p>An easy way to get daily information out of Toggl, and into another tool, by streamlining the copy-paste process</p>\n            <p>To get started, add your API Token in <Link to={\"/settings\"}>Settings</Link></p>\n        </Layout>\n    )\n}","import React from 'react';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {SettingsPage} from \"./Pages/Settings\";\nimport {AppState} from \"./Utilities/AppState\";\nimport {CalendarPage} from \"./Pages/Calendar\";\nimport {MainPage} from \"./Pages/Main\";\n\nexport const appState = new AppState();\n\nfunction App() {\n\n    return (\n            <Switch>\n                <Route path={'/settings'} component={SettingsPage}/>\n                <Route path={'/calendar'} component={CalendarPage}/>\n                <Route path={'/main'} component={MainPage}/>\n\n                <Route\n                    render={()=>{\n                        return localStorage.getItem('workSpaceId') ? <Redirect to={'/calendar'}/> : <Redirect to={'/main'}/>\n                    }}/>\n            </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport 'mobx-react-lite/batchingForReactDom'\n\nReactDOM.render(\n\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}